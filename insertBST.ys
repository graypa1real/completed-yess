# This program calls a insertBST function twice to insert two
# nodes into an existing binary search tree.
# The parameters to minBST are in %rdi and %rsi.
# %rdi contains the address of the root node. %rsi contains the
# address of a node to insert.  A node contains three 8-byte
# fields: address of left node, address of right node, value of
# node.
#
# This program isn't for the faint-hearted.
#
       .pos 0
       irmovq stack, %rsp
       irmovq node0, %rdi
       irmovq newN1, %rsi
       call insertBST
       irmovq node0, %rdi
       irmovq newN2, %rsi
       call insertBST
       halt
#
insertBST: #address of root node is in %rdi
           #address of node to insert is in %rsi
           irmovq $8, %r8  #for increments
           mrmovq 16(%rsi), %rax #rax holds the new node value
insertLoop:
           #check value of current node (3rd)
           addq %r8, %rdi
           addq %r8, %rdi  #gets to the value quad
           mrmovq (%rdi), %rcx  #rcx holds the value that to compare
           subq %rax, %rcx    #if current is greater than new rcx will be pos
           jl checkRight
checkLeft: #if new value is less, check left child (1st)
           subq %r8, %rdi
           subq %r8, %rdi  #get back to the left node
           mrmovq (%rdi), %rbx  #check if it is a 0
           andq %rbx, %rbx
           je insertNode  #jump if it is
           jmp takeNode  #else just go to the next node
checkRight:#if new value is greater, check right child (2nd)
            subq %r8, %rdi  #get back to the right node
            mrmovq (%rdi), %rbx  #check if it is a 0
            andq %rbx, %rbx
            je insertNode  #if that node quad is 0, put the new node there and stop
takeNode:   #advances through the tree based off of the node from the checks
            rrmovq %rbx, %rdi
            jmp insertLoop
insertNode:
            rmmovq %rsi, (%rdi)
done:       ret
#
       .pos 0x200
node0: .quad node1    #address of left child
       .quad node2    #address of right child
       .quad 10       #value in the node
node1: .quad node3
       .quad 0 #should be modified to be newNd1 (0x290)
       .quad 4
node2: .quad node4
       .quad node5
       .quad 15
node3: .quad 0
       .quad 0
       .quad 2
node4: .quad 0  #should be modified to be newNd2 (0x2a8)
       .quad 0
       .quad 12
node5: .quad 0
       .quad 0
       .quad 20
newN1: .quad 0
       .quad 0
       .quad 5
newN2: .quad 0
       .quad 0
       .quad 11
       .pos 0x400
stack: .quad 0
